{
  "swagger": "2.0",
  "info": {
    "description": "This is the interim internal Polymer API for Badge List",
    "version": "0.1",
    "title": "Internal Badge List API",
    "termsOfService": "https://www.badgelist.com/terms-of-service",
    "contact": {
      "email": "team@badgelist.com"
    }
  },
  "host": "www.badgelist.com",
  "tags": [
    {
      "name": "paginatedList",
      "description": "Endpoints which accept page parameter and respond with an items array and nextPage field."
    },
    {
      "name": "fullList",
      "description": "Endpoints which accept no page parameter but instead respond with an array of all available items."
    },
    {
      "name": "importList",
      "description": "Endpoints which accept list of items to import and respond with a poller whose data contains processed items when complete."
    },
    {
      "name": "recordItem",
      "description": "Endpoints which allow retrieving and modifying single record items. These support a subset of the standard restful actions and potentially additional custom actions."
    },
    {
      "name": "myGroups",
      "description": "List of current user's groups."
    },
    {
      "name": "myBadges",
      "description": "List of current user's badges in progress."
    },
    {
      "name": "group",
      "description": "A group represents an organization of some sort. Every badge in Badge List belongs to one specific group. Groups have admin and member users and can contain group tags."
    },
    {
      "name": "badge",
      "description": "Badges are micro-credentials which represent specific learning skills and achievements. When a user joins a badge they become a ‘badge learner’ and a ‘badge portfolio’ is created for them. Once the badge has been awarded they are referred to as a ‘badge expert’."
    },
    {
      "name": "poller",
      "description": "Pollers are returned by asynchronous actions. They can be queried repeatedly to track the progress of the action until it is completed."
    },
    {
      "name": "badgeEndorsements",
      "description": "Badge endorsements are positive feedback which result in the awarding of the badge when created. Badge endorsements are different from normal feedback in that they can be created by email address even if there is not yet a corresponding Badge List user."
    },
    {
      "name": "subscriptionPlans",
      "description": "Every paid group belongs to a particular subscription plan. Every subscription plan has a collection of features."
    },
    {
      "name": "subscriptionFeatures",
      "description": "Subscription feature items contain explanatory language for each feature."
    }
  ],
  "paths": {
    "/groups/my": {
      "get": {
        "tags": [
          "myGroups",
          "paginatedList"
        ],
        "summary": "Gets all groups for the current user",
        "operationId": "getMyGroups",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number of results",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "type": "object",
              "properties": {
                "next_page": {
                  "type": "integer",
                  "format": "int64"
                },
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Group"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/badges/my": {
      "get": {
        "tags": [
          "myBadges",
          "paginatedList"
        ],
        "summary": "Gets all badges for the current user",
        "operationId": "getMyBadges",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number of results",
            "required": false,
            "type": "integer",
            "format": "int64",
            "default": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "type": "object",
              "properties": {
                "next_page": {
                  "type": "integer",
                  "format": "int64"
                },
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Badge"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/i/subscription_plans": {
      "get": {
        "tags": [
          "subscriptionPlans",
          "fullList"
        ],
        "summary": "Gets a list of all currently available subscription plans",
        "operationId": "getSubscriptionPlans",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubscriptionPlan"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/i/subscription_features": {
      "get": {
        "tags": [
          "subscriptionFeatures",
          "fullList"
        ],
        "summary": "Gets a complete list of all possible features for all subscription plans",
        "operationId": "getSubscriptionFeatures",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubscriptionFeature"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/badges/{id}/endorsements": {
      "post": {
        "tags": [
          "badgeEndorsements",
          "importList"
        ],
        "summary": "Bulk awards a badge to up to 500 people at a time",
        "operationId": "importBadgeEndorsements",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "X-CSRF-Token",
            "in": "header",
            "description": "Form authenticity token",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The id or the (case-insensitive) slug of the badge record. If you use the slug then you must also specify the `parent_path` parameter.",
            "required": true,
            "type": "string"
          },
          {
            "name": "parent_path",
            "in": "query",
            "description": "The slug or id of the parent group. Only specify this parameter if you are using the badge's slug as the value in the `id` parameter.",
            "type": "string"
          },
          {
            "name": "send_emails_to_new_users",
            "in": "query",
            "description": "Specifies that badge awarded email notifications should be sent to email addresses which correspond to new Badge List users. Any email addresses which correspond to existing Badge List users will receive email according to their own user preferences.",
            "required": false,
            "default": false,
            "type": "boolean"
          },
          {
            "name": "items",
            "in": "body",
            "description": "The list of badge endorsements to create. The identity of the recipient is specified by email address. If the user already has a Badge List account they will be immediately awarded the badge, otherwise the endorsement is saved to the group's invited members list (the badge will then be awarded after a user creates a Badge List account with that email address).",
            "required": true,
            "schema": {
              "type" : "array",
              "maxItems": 500,
              "items" : {
                "$ref": "#/definitions/BadgeEndorsement"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "schema": {
              "type": "object",
              "properties": {
                "poller_id": {
                  "type": "string",
                  "format": "record_id",
                  "description": "The id of a poller record which can be used to track the status of the asynchronous operation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/pollers/{id}": {
      "get": {
        "tags": [
          "poller",
          "recordItem"
        ],
        "summary": "Gets a poller record by id",
        "operationId": "getPoller",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the poller record",
            "required": true,
            "type": "string",
            "format": "record_id"
          }
        ],
        "responses": {
          "200": {
            "description": "A poller object",
            "schema": {
              "$ref": "#/definitions/Poller"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/groups/{id}": {
      "get": {
        "tags": [
          "group",
          "recordItem"
        ],
        "summary": "Gets a group record by id",
        "operationId": "getGroup",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id or the (case-insensitive) slug of the group record. Either are acceptable.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A group object",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/badges/{id}": {
      "get": {
        "tags": [
          "badge",
          "recordItem"
        ],
        "summary": "Gets a badge record by id",
        "operationId": "getBadge",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id or the (case-insensitive) url of the badge record. If you use the url then you must also specify the `parent_path` parameter.",
            "required": true,
            "type": "string"
          },
          {
            "name": "parent_path",
            "in": "query",
            "description": "The url or id of the parent group. Only specify this parameter if you are using the badge's url as the value in the `id` parameter.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A badge object",
            "schema": {
              "$ref": "#/definitions/Badge"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "definitions": {
    "Group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "record_path": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "slug_with_caps": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "description": "Group Type",
          "enum": [
            "free",
            "paid"
          ]
        },
        "color": {
          "type": "string",
          "description": "Group Color",
          "enum": [
            "red",
            "pink",
            "purple",
            "deep-purple",
            "indigo",
            "blue",
            "light-blue",
            "cyan",
            "teal",
            "green",
            "light-green",
            "lime",
            "yellow",
            "amber",
            "orange",
            "deep-orange",
            "brown",
            "grey",
            "blue-grey"
          ]
        },
        "image_url": {
          "type": "string",
          "format": "url"
        },
        "image_medium_url": {
          "type": "string",
          "format": "url"
        },
        "image_small_url": {
          "type": "string",
          "format": "url"
        },
        "member_count": {
          "type": "integer",
          "format": "int64"
        },
        "admin_count": {
          "type": "integer",
          "format": "int64"
        },
        "total_user_count": {
          "type": "integer",
          "format": "int64"
        },
        "badge_count": {
          "type": "integer",
          "format": "int64"
        },
        "full_url": {
          "type": "string",
          "format": "url"
        },
        "relative_url": {
          "type": "string"
        },
        "current_user_permissions": {
          "$ref": "#/definitions/GroupPermissions"
        }
      },
      "xml": {
        "name": "Group"
      }
    },
    "GroupPermissions": {
      "type": "object",
      "properties": {
        "can_see_record": {
          "type": "boolean"
        },
        "is_member": {
          "type": "boolean"
        },
        "is_admin": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "GroupPermissions"
      }
    },
    "Badge": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "record_path": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "slug_with_caps": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "validation_request_count": {
          "type": "integer",
          "format": "int64"
        },
        "learner_count": {
          "type": "integer",
          "format": "int64"
        },
        "expert_user_count": {
          "type": "integer",
          "format": "int64"
        },
        "image_url": {
          "type": "string",
          "format": "url"
        },
        "image_medium_url": {
          "type": "string",
          "format": "url"
        },
        "image_small_url": {
          "type": "string",
          "format": "url"
        },
        "full_url": {
          "type": "string",
          "format": "url"
        },
        "relative_url": {
          "type": "string"
        },
        "current_user_permissions": {
          "$ref": "#/definitions/BadgePermissions"
        }
      },
      "xml": {
        "name": "Badge"
      }
    },
    "BadgePermissions": {
      "type": "object",
      "properties": {
        "can_see_record": {
          "type": "boolean"
        },
        "is_learner": {
          "type": "boolean"
        },
        "is_expert": {
          "type": "boolean"
        }
      },
      "xml": {
        "name": "BadgePermissions"
      }
    },
    "BadgeEndorsement": {
      "type": "object",
      "required": ["email", "summary"],
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "summary": {
          "type": "string",
          "description": "The summary is a short text-only message displayed on the badge portfolio.",
          "maxLength": 140
        },
        "body": {
          "type": "string",
          "format": "html",
          "description": "The body is a longer html message displayed on the badge portfolio."
        }
      },
      "xml": {
        "name": "BadgeEndorsement"
      }
    },
    "Poller": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "The current status of the poller item",
          "enum": [
            "pending",
            "successful",
            "failed"
          ]
        },
        "completed": {
          "type": "boolean",
          "description": "Returns true if status is `successful` or `failed`"
        },
        "message": {
          "type": "string",
          "description": "A user-facing message summarizing the status of the operation once it is completed"
        },
        "waiting_message": {
          "type": "string",
          "description": "A user-facing message that desribes the operation while it is pending"
        },
        "redirect_to": {
          "type": "string",
          "description": "A url to redirect the browser to that can optionally be set once the operation is completed"
        },
        "data": {
          "type": "object",
          "description": "Optional data package used to store relevant information once the operation is completed"
        },
        "progress": {
          "type": "integer",
          "format": "int64",
          "minimum": 0,
          "maximum": 100,
          "description": "Optional property used to indicate the current percentage of progress out of 100 while the operation is pending"
        }
      }
    },
    "SubscriptionPlan": {
      "type": "object",
      "properties": {
        "pricing_group": {
          "type": "string",
          "description": "Either `standard` or `k12`",
          "enum": [
            "standard",
            "k12"
          ]
        },
        "id": {
          "type": "string",
          "description": "The unique identifier for this plan. Includes the type, the payment interval and an integer indicating the version number of the plan."
        },
        "name": {
          "type": "string",
          "description": "Human-readable name of the plan"
        },
        "type": {
          "type": "string",
          "description": "A unique identified for the plan type. For each plan type there will be no more than one active plan at a time with the same `interval` and `pricing_group`.",
          "enum": [
            "solo",
            "team",
            "org",
            "hub"
          ]
        },
        "amount": {
          "type": "number",
          "description": "The price of this plan in cents per `interval`",
          "format": "currency"
        },
        "currency": {
          "type": "string",
          "description": "Currency code of the price, for now always returns `usd`"
        },
        "interval": {
          "type": "string",
          "description": "The payment interval of the plan",
          "enum": [
            "month",
            "year"
          ]
        },
        "trial_period_days": {
          "type": "number",
          "description": "The number of days in the trial period, zero if none"
        },
        "statement_descriptor": {
          "type": "string",
          "description": "How the plan is displayed on credit card statements"
        },
        "fa_icon": {
          "type": "string",
          "description": "The Font Awesome icon code of the icon representing this plan"
        },
        "bl_icon": {
          "type": "string",
          "description": "The Badge List icon code of the icon representing this plan"
        },
        "color": {
          "type": "string",
          "description": "The color which is used to represent this plan",
          "enum": [
            "red",
            "pink",
            "purple",
            "deep-purple",
            "indigo",
            "blue",
            "light-blue",
            "cyan",
            "teal",
            "green",
            "light-green",
            "lime",
            "yellow",
            "amber",
            "orange",
            "deep-orange",
            "brown",
            "grey",
            "blue-grey"
          ]
        },
        "description": {
          "type": "string",
          "description": "Explanatory text for this plan"
        },
        "users": {
          "type": "number",
          "description": "The number of members included in this plan, equal to `-1` if unlimited"
        },
        "admins": {
          "type": "number",
          "description": "The number of admin included in this plan, equal to `-1` if unlimited"
        },
        "full_member_groups": {
          "type": "number",
          "description": "For hub groups, the number of full member groups included"
        },
        "full_member_groups_plan": {
          "type": "string",
          "description": "For hub groups, the subscription plan id of the full member groups which are included"
        },
        "limited_member_groups": {
          "type": "number",
          "description": "For hub groups, the number of limited member groups included"
        },
        "limited_member_groups_plan": {
          "type": "string",
          "description": "For hub groups, the subscription plan id of the limited member groups which are included"
        },
        "features": {
          "type": "array",
          "description": "A list of feature ids included in this plan. Refer to the corresponding `SubscriptionFeature` for full details.",
          "items": {
            "type": "string"
          }
        }
      },
      "xml": {
        "name": "SubscriptionPlan"
      }
    },
    "SubscriptionFeature": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "xml": {
        "name": "SubscriptionFeature"
      }
    }
  }
}