<% content_for :extra_footer_text do %>
  Many thanks to <a href="http://www.thenounproject.com" target="_blank">the Noun Project</a> and
  their cadre of generous designers for building the icons used to make our badges. Please <a href="http://www.thenounproject.com" target="_blank">check out their website</a> and 
  consider supporting the wonderful work they do.
<% end %>

<script type="text/javascript">
  
  var selectedElement = {}; // maps from targetSelector to currently selected element

  $(document).ready(function() {
    buildUserInterface();
    checkForTooltips();

    // Now associate the events
    $("a.list-element").click(function() {
      return listElementClick($(this));
    });
    $("button.set-color").click(function() {
      manuallySetColor($(this));
    });
    $("#badge-frames,#badge-icons").scroll(function() {
      var e = $(this);
      var l = e.find(".scroll-left");
      var r = e.find(".scroll-right");
      l.css('left', (10 + e.scrollLeft())+"px")
      r.css('right', (10 - e.scrollLeft())+"px")
      
      if (e.scrollLeft() > 0) { if (!l.is(":visible")) l.fadeIn(); }
      else if (l.is(":visible")) l.fadeOut();

      if ((e[0].scrollWidth - e.width() - e.scrollLeft()) > 20) { if (!r.is(":visible")) r.fadeIn(); }
      else if (r.is(":visible")) r.fadeOut();
    });
    $(".scroll-left").click(function() {
      var e = $(this).closest("#badge-frames,#badge-icons");
      var newScrollLeft = Math.max(e.scrollLeft() - parseInt(e.width()*0.8), 0);
      e.animate({ scrollLeft: newScrollLeft }, 700);
      return false;
    });
    $(".scroll-right").click(function() {
      var e = $(this).closest("#badge-frames,#badge-icons");
      var newScrollLeft = Math.min(e.scrollLeft() + parseInt(e.width()*0.8), 
                                   e[0].scrollWidth - e.width()-20);
      e.animate({ scrollLeft: newScrollLeft }, 700);
      return false;
    });
    $("#badge-image").load(function() {
      $("#badge-image-spinner").fadeOut();
    });

    $("#icon-type").change(function() {
      if ($(this).val() == "text") {
        $("#badge-icons").slideUp();
        $("#badge-icon-text").slideDown();
        $("#text-icon").focus();
      } else {
        $("#badge-icon-text").slideUp();
        $("#badge-icons").slideDown();
      }
    });
    $("#text-icon").keyup(function() {
      setTextIcon($(this).val());
    });

    <% if @badge.new_record? %>
      <% if @badge.errors.blank? %>
        // Then select a random badge
        randomize();
      <% else %>
        // Load the current badge
        updateBadgeImagePreview();
      <% end %>
    <% end %>
  });

  function buildUserInterface() {
    var thumbnail; var text; var value;
    var sourceList; var newList; var selectedClass;
    var options; var curTable; var curRow; var curElement;

    // Get the current badge info if this is an edit
    var curBadgeFrame = "<%= @badge.image_frame %>";
    var curBadgeIcon = "<%= @badge.image_icon %>";
    var curIconIsText = false;
    var curBadgeColor1 = "<%= @badge.image_color1 %>";
    var curColor1IsCustom = false
    var curBadgeColor2 = "<%= @badge.image_color2 %>";
    var curColor2IsCustom = false

    <% if !@badge.new_record? || !@badge.errors.blank? %>
      // Copy the current info into the DOM
      $("#badge_image_frame").val(curBadgeFrame);
      $("#badge_image_icon").val(curBadgeIcon);
      if ($("#badge_image_icon").val() == null) { 
        // then we need to add this text as an option and log that the icon state is text
        $("#badge_image_icon").append("<option value='" + curBadgeIcon + "'>Custom Text</option>");
        $("#badge_image_icon").val(curBadgeIcon);
        curIconIsText = true;
      }
      $("#badge_image_color1").val(curBadgeColor1);
      if ($("#badge_image_color1").val() == null) { 
        // then we need to add this color as an option and log that the color is custom
        $("#badge_image_color1").append("<option value='" + curBadgeColor1 + "'>Custom Color</option>");
        $("#badge_image_color1").val(curBadgeColor1);
        curColor1IsCustom = true;
      }
      $("#badge_image_color2").val(curBadgeColor2);
      if ($("#badge_image_color2").val() == null) {
        // then we need to add this color as an option and log that the color is custom
        $("#badge_image_color2").append("<option value='" + curBadgeColor2 + "'>Custom Color</option>");
        $("#badge_image_color2").val(curBadgeColor2);
        curColor2IsCustom = true;
      }
    <% end %>
    
    // First build the frame list
    sourceList = $("#badge_image_frame"); 
    sourceList.after("<div id='badge-frames'></div>");
    newList = $("#badge-frames");
    newList.append("<a href='#' class='scroll-arrow scroll-left' style='display:none'>&#9664;</a>")
     .append("<a href='#' class='scroll-arrow scroll-right'>&#9654;</a>");
    sourceList.hide();
    sourceList.find("option").each(function() { 
      text = $(this).text();
      value = $(this).val();
      thumbnail = $(this).data("thumbnail");
      selectedClass = (curBadgeFrame == value) ? "selected" : "";

      newList.append("<a href='#' class='list-element " + selectedClass + "' data-value='" 
        + value + "' " + "data-target='#badge_image_frame'>" + "<img src='" + thumbnail + "'><br>" 
        + "<span>" + text + "</span></a>");
    });

    // Then build the icon list
    sourceList = $("#badge_image_icon"); 
    if (curIconIsText) sourceList.after("<div id='badge-icons' style='display:none'></div>");
    else sourceList.after("<div id='badge-icons'></div>");
    newList = $("#badge-icons");
    newList.append("<a href='#' class='scroll-arrow scroll-left' style='display:none'>&#9664;</a>")
     .append("<a href='#' class='scroll-arrow scroll-right'>&#9654;</a>");
    sourceList.hide();
    var iconCount = sourceList.find("option").length;
    var rowBreakAt = Math.ceil(iconCount / 3); var curCol = 1;
    sourceList.find("option").each(function() { 
      text = $(this).text();
      value = $(this).val();
      thumbnail = $(this).data("thumbnail");
      selectedClass = (curBadgeIcon == value) ? "selected" : "";

      newList.append("<a href='#' class='list-element " + selectedClass + "' data-value='" 
        + value + "' " + "data-target='#badge_image_icon'>" + "<img src='" + thumbnail + "'><br>" 
        + "<span>" + text + "</span></a>");

      if (curCol == rowBreakAt) {
        newList.append("<br>");
        curCol = 1;
      } else curCol++;
    });

    // Now build the text icon editor
    if (curIconIsText) {
      newList.after("<div id='badge-icon-text'></div>");
      newList = $("#badge-icon-text");
      newList.append("<span><label for='text-icon' maxlength='2'>Enter one or two letters:</label>"
        + "<input type='text' id='text-icon' value='" + curBadgeIcon + "'></span>");
    } else {
      newList.after("<div id='badge-icon-text' style='display:none'></div>");
      newList = $("#badge-icon-text");
      newList.append("<span><label for='text-icon' maxlength='2'>Enter one or two letters:</label>"
        + "<input type='text' id='text-icon'></span>");
    }

    // Foreground color list
    sourceList = $("#badge_image_color2"); 
    sourceList.after("<div id='badge-foreground-colors'><h2>Foreground Color</h2><br></div>");
    newList = $("#badge-foreground-colors");
    sourceList.hide();
    options = sourceList.find("option");
    var group_size = 8;
    for (var group = 0; (group*group_size) < options.length; group++) {
      if (group <= 2) {
        newList.append("<table></table>");
        curTable = newList.find("table").last();
      }
      curTable.append("<tr></tr>");
      curRow = curTable.find("tr").last();

      for (var i = group*group_size; (i < ((group+1)*group_size)) && (i < options.length); i++) { 
        curElement = $(options[i]);
        text = curElement.text();
        value = curElement.val();
        selectedClass = (curBadgeColor2 == value) ? "selected" : "";

        curRow.append("<td style='background-color:#" + value + "'>"
          + "<a href='#' class='list-element " + selectedClass + "' data-value='" + value + "' "
          + "data-update='#manual-foreground-color' data-toggle='tooltip' "
          + "data-target='#badge_image_color2' title='" + text.trim() + "'> &nbsp; </a></td>");
      }
    }
    newList.append("<span class='manual-color'><label for='manual-foreground-color'>Hex code</label> "
      + "<input type='text' id='manual-foreground-color' value='" + curBadgeColor2 + "'>"
      + "<button type='button' class='btn btn-mini set-color' "
      + "data-target='#badge_image_color2' data-source='#manual-foreground-color'>"
      + "Update</button></span>");

    // Background color list
    sourceList = $("#badge_image_color1"); 
    sourceList.after("<div id='badge-background-colors'><h2>Background Color</h2><br></div>");
    newList = $("#badge-background-colors");
    sourceList.hide();
    options = sourceList.find("option");
    var group_size = 8;
    for (var group = 0; (group*group_size) < options.length; group++) {
      if (group <= 2) {
        newList.append("<table></table>");
        curTable = newList.find("table").last();
      }
      curTable.append("<tr></tr>");
      curRow = curTable.find("tr").last();

      for (var i = group*group_size; (i < ((group+1)*group_size)) && (i < options.length); i++) { 
        curElement = $(options[i]);
        text = curElement.text();
        value = curElement.val();
        selectedClass = (curBadgeColor1 == value) ? "selected" : "";

        curRow.append("<td style='background-color:#" + value + "'>"
          + "<a href='#' class='list-element " + selectedClass + "' data-value='" + value + "' "
          + "data-update='#manual-background-color' data-toggle='tooltip' "
          + "data-target='#badge_image_color1' title='" + text.trim() + "'> &nbsp; </a></td>");
      }
    }
    newList.append("<span class='manual-color'><label for='manual-background-color'>Hex code</label> "
      + "<input type='text' id='manual-background-color' value='" + curBadgeColor1 + "'>"
      + "<button type='button' class='btn btn-mini set-color' "
      + "data-target='#badge_image_color1' data-source='#manual-background-color'>"
      + "Update</button></span>");

    // Now if this is an edit we need to set the initially selectedElements
    // And we also need to manually set the initial values of the form fields
    <% if !@badge.new_record? || !@badge.errors.blank? %>
      selectedElement["#badge_image_frame"] = $("#badge-frames").find(".list-element.selected");
      selectedElement["#badge_image_icon"] = $("#badge-icons").find(".list-element.selected");
      selectedElement["#badge_image_color2"] = $("#badge-foreground-colors").find(".list-element.selected");
      selectedElement["#badge_image_color1"] = $("#badge-background-colors").find(".list-element.selected");
    <% end %>
  }

  function listElementClick(jqListElement) {
    var targetSelector = jqListElement.data("target");
    var updateSelector = jqListElement.data("update");

    // Set the value
    $(targetSelector).val(jqListElement.data("value"));
    if (updateSelector != null) $(updateSelector).val(jqListElement.data("value"));
    
    // Update the css
    if (selectedElement[targetSelector] != null) 
      selectedElement[targetSelector].removeClass('selected');
    jqListElement.addClass('selected');
    selectedElement[targetSelector] = jqListElement;

    // Update the badge image preview and scroll up to the badge image
    updateBadgeImagePreview();
    $("html, body").animate({scrollTop: $("#badge-image-viewer").offset().top-95}, 500);
    return false;
  }

  function manuallySetColor(jqButton) {
    var sourceSelector = jqButton.data("source");
    var targetSelector = jqButton.data("target");
    var value = $(sourceSelector).val();

    // First clean up the value and save it back to the source box so the user can see it
    value = value.trim().replace(/#/g, "");
    $(sourceSelector).val(value);
    
    // Then set the value
    $(targetSelector).val(value);
    if ($(targetSelector).val() == null) { // then we need to add this color as an option
      $(targetSelector).append("<option value='" + value + "'>Custom Color</option>");
      $(targetSelector).val(value);
    }
    
    // Update the css
    if (selectedElement[targetSelector] != null) {
      selectedElement[targetSelector].removeClass('selected');
      selectedElement[targetSelector] == null;
    }

    // Update the badge image preview and scroll up to the badge image
    updateBadgeImagePreview();
    $("html, body").animate({scrollTop: $("#badge-image-viewer").offset().top-95}, 500);
  }

  function setTextIcon(value) {
    // First clean up the value and save it back to the source box so the user can see it
    if (value != $("#badge_image_icon").val()) {
      value = value.trim()
      $("#text-icon").val(value);
      
      // Then set the value
      $("#badge_image_icon").val(value);
      if ($("#badge_image_icon").val() == null) { // then we need to add this text as an option
        $("#badge_image_icon").append("<option value='" + value + "'>Custom Text</option>");
        $("#badge_image_icon").val(value);
      }
      
      // Update the css
      if (selectedElement["#badge_image_icon"] != null) {
        selectedElement["#badge_image_icon"].removeClass('selected');
        selectedElement["#badge_image_icon"] == null;
      }

      // Update the badge image preview
      updateBadgeImagePreview();
    }
  }

  function updateBadgeImagePreview() {
    var frame = $("#badge_image_frame").val();
    var icon = $("#badge_image_icon").val();
    var color1 = $("#badge_image_color1").val();
    var color2 = $("#badge_image_color2").val();

    // Load the image with javascript so we can show the spinner while it's loading
    $("#badge-image-spinner").show();
    var imagePath = "/i?frame=" + frame + "&icon=" + icon + "&c1=" + color1 + "&c2=" + color2;
    $("#badge-image").attr("src", imagePath);
  }

  function randomize() {
    var options; var random; var value; var target; var e;
    var source_selectors = ["#badge-frames", "#badge-icons", "#badge-background-colors", 
      "#badge-foreground-colors"];

    // Run through and pick random list elements, copying each one to it's destination
    for (i in source_selectors) {
      options = $(source_selectors[i]).find(".list-element");
      random = Math.floor(Math.random()*options.length);
      e = options.eq(random);
      value = e.data("value");
      target = e.data("target");
      
      // Set the value
      $(target).val(value);

      // Update the css
      if (selectedElement[target] != null) 
        selectedElement[target].removeClass('selected');
      e.addClass('selected');
      selectedElement[target] = e;
    }

    // Switch back to image icon mode if we were in text icon mode before
    if ($("#icon-type").val() == "text") {
      $("#icon-type").val("image");
      $("#icon-type").change();
    }

    // Then update the image
    updateBadgeImagePreview();
  }

  function toggleEditor(buttonElement) {
    if ($(buttonElement).data("visible")) {
      $("#badge-image-editor").slideUp();
      $(buttonElement).text("Edit Badge Image");
      $(buttonElement).data("visible", false);
    } else {
      $("#badge-image-editor").slideDown();
      $(buttonElement).text("Hide Editor");
      $(buttonElement).data("visible", true);
    }
  }

</script>

<div class="badge-maker">
  <div class="control-group">
    <label class="control-label">Badge Image</label>
    <div class="controls">
      
      <div id="badge-image-viewer">
        <span id="badge-image-wrapper">
          <div class="spinner-wrapper" id="badge-image-spinner" style="display:none">
            <div class="spinner"></div>
          </div>
          <% if @badge.new_record? %>
            <%= image_tag "blank.png", id: "badge-image" %>
          <% else %>
            <img src="<%= group_badge_path(@group, @badge, format: :png) %>" id="badge-image"/>
          <% end %>
        </span>
        <button type="button" id="randomize-badge-image" class="btn btn-small" onclick="randomize()">
          Randomize
        </button>
        <button type="button" id="toggle-badge-image-editor" class="btn btn-small"
          onclick="toggleEditor(this)">
          Edit
        </button>
        <button type="button" id="toggle-badge-image-uploader" class="btn btn-small">
          Upload
        </button>
      </div>

      <div id="badge-image-editor" style="display:none">

        <div class="header-wrap">
          <h2>Frame</h2>
        </div>
        <select id="badge_image_frame" name="badge[image_frame]">
          <% BADGE_MAKER_CONFIG[:frames].keys.each do |frame| %>
            <option value="<%= frame %>" 
              data-thumbnail="<%= image_path "badge_maker/frames/#{frame}.png" %>">
              <%= frame.split("-").map{ |s| s.capitalize }.join(" ") %>
            </option>
          <% end %>
        </select>

        <div class="header-wrap">
          <h2>Icon</h2>
          <span id="icon-options">
            <select id="icon-type">
              <option value="image" selected="true">Use an image icon</option>
              <option value="text">Use text initials as icon</option>
            </select>
          </span>
        </div>
        <select id="badge_image_icon" name="badge[image_icon]">
          <% BADGE_MAKER_CONFIG[:icons].keys.sort.each do |icon| %>
            <option value="<%= icon %>" 
              data-thumbnail="<%= image_path "badge_maker/icons/#{icon}.png" %>">
              <%= icon.split("-").map{ |s| s.capitalize }.join(" ") %>
            </option>
          <% end %>
        </select>

        <div id="badge-colors">
          <select id="badge_image_color2" name="badge[image_color2]">
            <% BADGE_MAKER_CONFIG[:colors]['all'].keys.each do |color| %>
              <option value="<%= BADGE_MAKER_CONFIG[:colors]['all'][color]['hex'] %>">
                <%= color.split(" ").map{ |s| s.capitalize }.join(" ") %>
              </option>
            <% end %>
          </select>
          <select id="badge_image_color1" name="badge[image_color1]">
            <% BADGE_MAKER_CONFIG[:colors]['all'].keys.each do |color| %>
              <option value="<%= BADGE_MAKER_CONFIG[:colors]['all'][color]['hex'] %>">
                <%= color.split(" ").map{ |s| s.capitalize }.join(" ") %>
              </option>
            <% end %>
          </select>
        </div>

      </div>

    </div>
  </div>
</div>